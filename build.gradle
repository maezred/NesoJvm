buildscript {
  ext.kotlin_version = '1.1.2-2'

  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    classpath 'org.ajoberstar:gradle-git:1.7.1'
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
  }
}

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.github.johnrengelman.plugin-shadow'

allprojects {
  group = 'cafe.neso'
  description = 'Neso Core Jvm Library'

  def lastCommit = { grgit.log(maxCommits: 1).get(0) }

  project.ext {
    groupPath = "${-> "$group".replace('.', '/')}"
    lastCommit = { grgit.log(maxCommits: 1).get(0) }
    isDirty = { "${project.version}".contains('uncommitted') }
    isRelease = { !"${project.version}".contains('-') }
    isSnapshot = { "${project.version}".contains('dev') }
    artifactId = "${-> project.name.toLowerCase()}"
    authorName = "${-> lastCommit().author.name}"
    authorEmail = "${-> lastCommit().author.email}"
    website = "${-> "https://github.com/moltendorf/${project.name}"}"
    buildDateTime = "${-> project.ext.date.format('YYYY/MM/dd HH:mm:ss zzz')}"
    buildDate = "${-> project.ext.date.format('YYYY/MM/dd')}"
    buildTime = "${-> project.ext.date.format('HH:mm:ss')}"
    copyright = 2017 // Hardcoded for now.
    date = new Date()
    year = "${-> project.ext.date.format('YYYY')}"
  }

  repositories {
    mavenCentral()
    jcenter()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public' }
    maven { url 'https://fab.moltendorf.net/nexus/releases' }

    maven { url 'https://jitpack.io' }
  }

  shadowJar {
    configurations = [project.configurations.compile]

    baseName = project.name
    version = project.version
    classifier = null

    from("$projectDir/src/main/templates") {
      expand project: project
    }

    from("$buildDir/META-INF") {
      include 'LICENSE'
      include 'README.md'

      into projectDir
    }

    manifest.attributes 'Specification-Title': project.name,
      'Specification-Vendor': "${project.ext.authorName} <${project.ext.authorEmail}>",
      'Implementation-Title': "${project.group}.${project.ext.artifactId}.${project.name}",
      'Implementation-Version': project.version

//  relocate 'kotlin', "${project.group}.${project.ext.artifactId}.lib.kotlin"
//  relocate 'org.intellij.lang.annotations', "${project.group}.${project.ext.artifactId}.lib.org.intellij.lang.annotations"
//  relocate 'org.jetbrains.annotations', "${project.group}.${project.ext.artifactId}.lib.org.jetbrains.annotations"

  }
}

dependencies {
  compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8'
  compile 'org.jetbrains.kotlin:kotlin-reflect'

  testCompile 'junit:junit:4.12'
  testCompile 'org.jetbrains.kotlin:kotlin-test'
  testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
}

sourceSets {
  main {
    java { srcDirs += 'core/src/main/java' }
    kotlin { srcDirs += 'core/src/main/kotlin' }
  }

  test {
    java { srcDirs += 'core/src/test/java' }
    kotlin { srcDirs += 'core/src/test/kotlin' }
  }
}

publishing {
  publications {
    shadow(MavenPublication) { publication ->
      project.shadow.component(publication)
    }
  }

  repositories {
    maven {
      if (isRelease()) {
        url "file://$projectDir/out/nexus/releases"
      } else {
        url "file://$projectDir/out/nexus/snapshots"
      }
    }
  }
}

kotlin {
  experimental {
    coroutines "enable"
  }
}
